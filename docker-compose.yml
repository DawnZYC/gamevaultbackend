services:
  # === PostgreSQL ===
  postgres:
    image: postgres:16
    container_name: gamevault_postgres
    ports:
      - "12000:5432"
    environment:
      - TZ=Asia/Singapore
      - POSTGRES_DB=gamevault
      - POSTGRES_USER=gamevault_user
      - POSTGRES_PASSWORD=gamevault_pass
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U gamevault_user -d gamevault" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gamevault

  # === Redis ===
  redis:
    image: redis:alpine
    container_name: gamevault_redis
    ports:
      - "12003:6379"
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./docker/redis/data/:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - gamevault

  # === Minio ===
  minio:
    image: minio/minio:latest
    container_name: gamevault_minio
    ports:
      - "9000:9000"      # API端口
      - "9001:9001"      # Console端口(Web管理界面)
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      TZ: Asia/Singapore
    volumes:
      - ./docker/minio/data:/data
      - ./docker/minio/config:/root/.minio
    command: server /data --console-address ":9001"
    privileged: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - gamevault

  # === MinIO 自动初始化 ===
  minio-init:
    image: minio/mc:latest
    container_name: gamevault_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO...';
      sleep 5;
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb --ignore-existing myminio/gamevault-images;
      mc mb --ignore-existing myminio/gamevault-videos;
      mc mb --ignore-existing myminio/gamevault-files;
      mc mb --ignore-existing myminio/gamevault-audios;
      mc mb --ignore-existing myminio/gamevault-chat;
      mc anonymous set download myminio/gamevault-images;
      mc anonymous set download myminio/gamevault-videos;
      mc anonymous set download myminio/gamevault-files;
      mc anonymous set download myminio/gamevault-audios;
      mc anonymous set download myminio/gamevault-chat;
      echo 'MinIO buckets created!';
      mc ls myminio;
      exit 0;
      "
    networks:
      - gamevault

#  # === Spring Boot Backend ===
#  backend:
#    build: .
#    container_name: gamevault_backend
#    depends_on:
#      - postgres
#      - redis
#    ports:
#      - "8080:8080"
#    environment:
#      SPRING_PROFILES_ACTIVE: docker
#    volumes:
#      - ./secrets:/app/secrets   # 挂载本地 secrets 目录到容器的 /app/secrets
#    networks:
#      - gamevault


  backend:
    # GitHub Actions 会通过环境变量传递 DOCKERHUB_USERNAME
    # 本地开发时如果没设置环境变量，会使用默认值 your_username
    image: ${DOCKERHUB_USERNAME:-your_username}/gamevault-backend:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gamevault_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/gamevault
      - SPRING_DATASOURCE_USERNAME=gamevault_user
      - SPRING_DATASOURCE_PASSWORD=gamevault_pass
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - JAVA_OPTS=-Xmx1g -Xms512m
    volumes:
      - ./secrets:/app/secrets
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - gamevault

networks:
  gamevault:
    driver: bridge