# ==========================================
# CI Workflow - Build, Test, and Package
# Based on Workshop 6 - DevOps in the Cloud
# ==========================================

name: "CI - Build and Test"

on:
  push:
    branches: [dev/master, master, main]
  pull_request:
    branches: [dev/master, master, main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: gamevault-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build, Test & Package

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: gamevault_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Install dependencies
        run: mvn dependency:go-offline -B

      - name: Build with Maven
        run: mvn clean compile -Dcheckstyle.skip

      - name: Run Unit Tests
        run: mvn test -B
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/gamevault_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_password
          SPRING_DATA_REDIS_HOST: localhost
          SPRING_DATA_REDIS_PORT: 6379

      - name: Generate Code Coverage Report
        run: mvn jacoco:report

#      - name: Upload Coverage to Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          files: ./target/site/jacoco/jacoco.xml
#          flags: unittests
#          name: codecov-umbrella
#          fail_ci_if_error: false

      - name: Package Application
        run: mvn package -DskipTests -B

      - name: Generate Build Summary
        run: |
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "target/site/jacoco/index.html" ]; then
            echo "📊 Code Coverage report generated" >> $GITHUB_STEP_SUMMARY
          fi

          JAR_FILE=$(ls target/*.jar | head -n 1)
          if [ -f "$JAR_FILE" ]; then
            JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
            echo "📦 JAR file: $(basename $JAR_FILE) ($JAR_SIZE)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/
          retention-days: 30

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    name: Build Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate Docker Build Summary
        run: |
          echo "## 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker image built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: latest, ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
