# ==========================================
# CD Workflow - Deploy to Production
# Based on Workshop 6 & 7 - Continuous Deployment
# ==========================================

name: "CD - Deploy"

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: gamevault-backend

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "false"
          skip-version-file: true
          skip-commit: true

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## GameVault Backend ${{ github.ref_name }}

            ${{ steps.changelog.outputs.clean_changelog }}

            ### Docker Image
            ```
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            ### 🔗 Links
            - [Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }})
            - [Documentation](https://github.com/${{ github.repository }})
          draft: false
          prerelease: false

  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean compile -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Docker Scout - Final Scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          exit-code: false
          summary: true

      - name: Generate Deployment Summary
        run: |
          echo "## Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy to cloud (example with generic deployment)
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy to Staging
    if: github.ref == 'refs/heads/master'
    environment:
      name: staging
      url: https://47.130.173.114:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Notification
        run: |
          echo "## Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Application deployed to staging environment" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Access Staging](https://staging.gamevault.example.com)" >> $GITHUB_STEP_SUMMARY

      # Add your deployment commands here
      # Examples:
      # - SSH to server and pull new image
      # - Update Kubernetes deployment
      # - Trigger AWS ECS task update
      # - Run Terraform/Ansible scripts

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy to Production
#    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://47.130.173.114:8080
#      url: https://gamevault.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "~/gamevault"
          overwrite: true

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e
            
            echo "=========================================="
            echo "Starting Deployment"
            echo "=========================================="
            
            # 切换到项目目录
            cd ~/gamevault
            
            # 设置 DOCKERHUB_USERNAME 
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export IMAGE_TAG=latest
          
            
            # 显示配置（调试用）
            echo "Using Docker Hub username: $DOCKERHUB_USERNAME"
            echo "Using image tag: $IMAGE_TAG"
            
            # 拉取最新镜像
            echo ""
            echo "Pulling latest image..."
            docker compose pull backend
            
            # 停止旧容器
            echo ""
            echo "Stopping old container..."
            docker compose stop backend || true
            docker compose rm -f backend || true
            
            # 启动新容器
            echo ""
            echo "Starting new container..."
            docker compose up -d backend
            
            # 等待应用启动
            echo ""
            echo "Waiting for application to start..."
            sleep 30
            
            # 健康检查
            echo ""
            echo "Health check..."
            max_attempts=2
            attempt=0
            until curl -f http://localhost:8080/actuator/health || [ $attempt -eq $max_attempts ]; do
              attempt=$((attempt + 1))
              echo "  Attempt $attempt/$max_attempts..."
              sleep 5
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "Health check failed!"
              echo "Container logs:"
              docker compose logs --tail=50 backend
              exit 1
            fi
            
            echo ""
            echo "Application is healthy!"
            
            # 显示容器状态
            echo ""
            echo "Container status:"
            docker compose ps
            
            # 清理旧镜像
            echo ""
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo ""
            echo "=========================================="
            echo "Deployment Completed Successfully!"
            echo "=========================================="

      - name: Deploy Notification
        run: |
          echo "## Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Application deployed to production environment" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Access Production](https://gamevault.example.com)" >> $GITHUB_STEP_SUMMARY

      # Add your production deployment commands here
