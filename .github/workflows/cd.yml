# ==========================================
# CD Workflow - Deploy to Production
# Based on Workshop 6 & 7 - Continuous Deployment
# ==========================================

name: "CD - Deploy"

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: gamevault-backend

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "false"
          skip-version-file: true
          skip-commit: true

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## GameVault Backend ${{ github.ref_name }}

            ${{ steps.changelog.outputs.clean_changelog }}

            ### Docker Image
            ```
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            ### 🔗 Links
            - [Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }})
            - [Documentation](https://github.com/${{ github.repository }})
          draft: false
          prerelease: false

  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean compile -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Docker Scout - Final Scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          exit-code: false
          summary: true

      - name: Generate Deployment Summary
        run: |
          echo "## Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy to cloud (example with generic deployment)
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy to Staging
    if: github.ref == 'refs/heads/master'
    environment:
      name: staging
      url: https://47.130.173.114:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Notification
        run: |
          echo "## Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Application deployed to staging environment" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Access Staging](https://staging.gamevault.example.com)" >> $GITHUB_STEP_SUMMARY

      # Add your deployment commands here
      # Examples:
      # - SSH to server and pull new image
      # - Update Kubernetes deployment
      # - Trigger AWS ECS task update
      # - Run Terraform/Ansible scripts

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy to Production
    environment:
      name: production
      url: https://47.130.173.114:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ============================================
      # 步骤 1: 准备 EC2 目录和权限
      # ============================================
      - name: Prepare EC2 directories and permissions
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "=========================================="
            echo "Preparing Deployment Environment"
            echo "=========================================="

            # 检查是否是首次部署
            if [ ! -d ~/gamevault ]; then
              echo "🆕 First time deployment - creating directory structure"
              mkdir -p ~/gamevault
              FIRST_DEPLOY=true
            else
              echo "🔄 Existing deployment found"
              FIRST_DEPLOY=false

              # 备份重要数据
              echo "Backing up data..."
              mkdir -p ~/gamevault-backup

              # 备份 postgres 数据
              if [ -d ~/gamevault/docker/postgres/data ] && [ "$(ls -A ~/gamevault/docker/postgres/data)" ]; then
                echo "  - Backing up PostgreSQL data..."
                rsync -a ~/gamevault/docker/postgres/data/ ~/gamevault-backup/postgres-data/
              fi

              # 备份 uploads
              if [ -d ~/gamevault/uploads ] && [ "$(ls -A ~/gamevault/uploads)" ]; then
                echo "  - Backing up uploads..."
                rsync -a ~/gamevault/uploads/ ~/gamevault-backup/uploads/
              fi

              # 清理旧的配置文件 (保留数据目录)
              echo "Cleaning old configuration files..."
              rm -f ~/gamevault/docker-compose.yml
              rm -rf ~/gamevault/docker/postgres/init
              rm -rf ~/gamevault/secrets
            fi

            # 创建必要的目录结构
            echo "Creating directory structure..."
            mkdir -p ~/gamevault/docker/postgres/init
            mkdir -p ~/gamevault/docker/postgres/data
            mkdir -p ~/gamevault/docker/redis/data
            mkdir -p ~/gamevault/docker/minio/data
            mkdir -p ~/gamevault/secrets/keys
            mkdir -p ~/gamevault/uploads

            # 恢复数据 (如果有备份且当前数据为空)
            if [ "$FIRST_DEPLOY" = false ]; then
              if [ -d ~/gamevault-backup/postgres-data ] && [ ! "$(ls -A ~/gamevault/docker/postgres/data)" ]; then
                echo "Restoring PostgreSQL data..."
                rsync -a ~/gamevault-backup/postgres-data/ ~/gamevault/docker/postgres/data/
              fi

              if [ -d ~/gamevault-backup/uploads ] && [ ! "$(ls -A ~/gamevault/uploads)" ]; then
                echo "Restoring uploads..."
                rsync -a ~/gamevault-backup/uploads/ ~/gamevault/uploads/
              fi
            fi

            # 设置权限
            echo "Setting permissions..."
            chmod -R 755 ~/gamevault

            echo "✅ Environment prepared successfully"

      # ============================================
      # 步骤 2: 复制部署文件
      # ============================================
      - name: Copy deployment files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,docker/postgres/init/,secrets/"
          target: "~/gamevault"
          overwrite: true

      # ============================================
      # 步骤 3: 部署应用
      # ============================================
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e

            echo "=========================================="
            echo "Starting Deployment"
            echo "=========================================="

            cd ~/gamevault

            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export IMAGE_TAG=latest

            echo "Using Docker Hub username: $DOCKERHUB_USERNAME"
            echo "Using image tag: $IMAGE_TAG"

            # 判断部署类型
            if [ ! -d "./docker/postgres/data" ] || [ ! "$(ls -A ./docker/postgres/data 2>/dev/null)" ]; then
              echo ""
              echo "🆕 First deployment - Full setup"
              DEPLOYMENT_TYPE="first"
            else
              echo ""
              echo "🔄 Update deployment - Backend only"
              DEPLOYMENT_TYPE="update"
            fi

            # 首次部署
            if [ "$DEPLOYMENT_TYPE" = "first" ]; then
              echo ""
              echo "Stopping any existing services..."
              docker compose down -v || true

              echo ""
              echo "Pulling all images..."
              docker compose pull

              echo ""
              echo "Starting all services..."
              docker compose up -d

              echo ""
              echo "Waiting for services to initialize (60s)..."
              sleep 60

            # 更新部署
            else
              echo ""
              echo "Pulling latest backend image..."
              docker compose pull backend

              echo ""
              echo "Restarting backend service..."
              docker compose stop backend
              docker compose rm -f backend
              docker compose up -d backend

              echo ""
              echo "Waiting for backend to start (30s)..."
              sleep 30
            fi

            # 健康检查
            echo ""
            echo "=========================================="
            echo "Health Checks"
            echo "=========================================="

            echo ""
            echo "Checking PostgreSQL..."
            docker compose exec -T postgres pg_isready -U gamevault_user -d gamevault && echo "✅ PostgreSQL OK" || echo "⚠️  PostgreSQL check failed"

            echo ""
            echo "Checking Redis..."
            docker compose exec -T redis redis-cli ping | grep -q "PONG" && echo "✅ Redis OK" || echo "⚠️  Redis check failed"

            echo ""
            echo "Checking Backend..."
            max_attempts=6
            attempt=0
            until curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1 || [ $attempt -eq $max_attempts ]; do
              attempt=$((attempt + 1))
              echo "  Attempt $attempt/$max_attempts..."
              sleep 10
            done

            if [ $attempt -eq $max_attempts ]; then
              echo ""
              echo "❌ Backend health check FAILED!"
              echo ""
              docker compose logs --tail=100 backend
              docker compose ps
              exit 1
            fi

            echo "✅ Backend OK"

            # 验证数据库表 (仅首次部署)
            if [ "$DEPLOYMENT_TYPE" = "first" ]; then
              echo ""
              echo "Verifying database schema..."
              docker compose exec -T postgres psql -U gamevault_user -d gamevault -c "\dt" | grep -q "developer_profile" && echo "✅ Tables created" || echo "⚠️  Table verification failed"
            fi

            echo ""
            echo "=========================================="
            echo "✅ Deployment Completed!"
            echo "=========================================="

            docker compose ps
            docker image prune -f || true

      - name: Deploy Notification
        run: |
          echo "## Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Application deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- URL: http://47.130.173.114:8080" >> $GITHUB_STEP_SUMMARY
